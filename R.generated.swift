//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 9 storyboards.
  struct storyboard {
    /// Storyboard `AuthorizationSceneStoryboard`.
    static let authorizationSceneStoryboard = _R.storyboard.authorizationSceneStoryboard()
    /// Storyboard `DetailStoryboard`.
    static let detailStoryboard = _R.storyboard.detailStoryboard()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `MainGalleryScreen`.
    static let mainGalleryScreen = _R.storyboard.mainGalleryScreen()
    /// Storyboard `MainStoryboard`.
    static let mainStoryboard = _R.storyboard.mainStoryboard()
    /// Storyboard `PhotoStoryboard`.
    static let photoStoryboard = _R.storyboard.photoStoryboard()
    /// Storyboard `ProfileStoryboard`.
    static let profileStoryboard = _R.storyboard.profileStoryboard()
    /// Storyboard `RegisterStoryboard`.
    static let registerStoryboard = _R.storyboard.registerStoryboard()
    /// Storyboard `WelcomeStoryboard`.
    static let welcomeStoryboard = _R.storyboard.welcomeStoryboard()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "AuthorizationSceneStoryboard", bundle: ...)`
    static func authorizationSceneStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.authorizationSceneStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "DetailStoryboard", bundle: ...)`
    static func detailStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.detailStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "MainGalleryScreen", bundle: ...)`
    static func mainGalleryScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.mainGalleryScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "MainStoryboard", bundle: ...)`
    static func mainStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.mainStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "PhotoStoryboard", bundle: ...)`
    static func photoStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.photoStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ProfileStoryboard", bundle: ...)`
    static func profileStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.profileStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "RegisterStoryboard", bundle: ...)`
    static func registerStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.registerStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "WelcomeStoryboard", bundle: ...)`
    static func welcomeStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.welcomeStoryboard)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 3 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `AppGrayTextFields`.
    static let appGrayTextFields = Rswift.ColorResource(bundle: R.hostingBundle, name: "AppGrayTextFields")
    /// Color `AppPink`.
    static let appPink = Rswift.ColorResource(bundle: R.hostingBundle, name: "AppPink")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AppGrayTextFields", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appGrayTextFields(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appGrayTextFields, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AppPink", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appPink(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appPink, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AppGrayTextFields", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func appGrayTextFields(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.appGrayTextFields.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AppPink", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func appPink(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.appPink.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 14 images.
  struct image {
    /// Image `Calendar`.
    static let calendar = Rswift.ImageResource(bundle: R.hostingBundle, name: "Calendar")
    /// Image `Ellipse`.
    static let ellipse = Rswift.ImageResource(bundle: R.hostingBundle, name: "Ellipse")
    /// Image `ErrorIcon`.
    static let errorIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ErrorIcon")
    /// Image `Icon`.
    static let icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon")
    /// Image `Intersect`.
    static let intersect = Rswift.ImageResource(bundle: R.hostingBundle, name: "Intersect")
    /// Image `Line-1`.
    static let line1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Line-1")
    /// Image `Rectangle`.
    static let rectangle = Rswift.ImageResource(bundle: R.hostingBundle, name: "Rectangle")
    /// Image `backImage`.
    static let backImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "backImage")
    /// Image `email`.
    static let email = Rswift.ImageResource(bundle: R.hostingBundle, name: "email")
    /// Image `eyeClose`.
    static let eyeClose = Rswift.ImageResource(bundle: R.hostingBundle, name: "eyeClose")
    /// Image `eyeOpen`.
    static let eyeOpen = Rswift.ImageResource(bundle: R.hostingBundle, name: "eyeOpen")
    /// Image `name`.
    static let name = Rswift.ImageResource(bundle: R.hostingBundle, name: "name")
    /// Image `photo`.
    static let photo = Rswift.ImageResource(bundle: R.hostingBundle, name: "photo")
    /// Image `placeholder`.
    static let placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Calendar", bundle: ..., traitCollection: ...)`
    static func calendar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.calendar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Ellipse", bundle: ..., traitCollection: ...)`
    static func ellipse(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ellipse, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ErrorIcon", bundle: ..., traitCollection: ...)`
    static func errorIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.errorIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon", bundle: ..., traitCollection: ...)`
    static func icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Intersect", bundle: ..., traitCollection: ...)`
    static func intersect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.intersect, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Line-1", bundle: ..., traitCollection: ...)`
    static func line1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.line1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Rectangle", bundle: ..., traitCollection: ...)`
    static func rectangle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "backImage", bundle: ..., traitCollection: ...)`
    static func backImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "email", bundle: ..., traitCollection: ...)`
    static func email(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.email, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eyeClose", bundle: ..., traitCollection: ...)`
    static func eyeClose(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eyeClose, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eyeOpen", bundle: ..., traitCollection: ...)`
    static func eyeOpen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eyeOpen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "name", bundle: ..., traitCollection: ...)`
    static func name(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.name, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "photo", bundle: ..., traitCollection: ...)`
    static func photo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.photo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "placeholder", bundle: ..., traitCollection: ...)`
    static func placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = true

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 3 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `PhotoCell`.
    static let photoCell: Rswift.ReuseIdentifier<MainPhotoCellImp> = Rswift.ReuseIdentifier(identifier: "PhotoCell")
    /// Reuse identifier `UserPhotoCell`.
    static let userPhotoCell: Rswift.ReuseIdentifier<ProfilePhotoCellImp> = Rswift.ReuseIdentifier(identifier: "UserPhotoCell")
    /// Reuse identifier `myCell`.
    static let myCell: Rswift.ReuseIdentifier<MyCell> = Rswift.ReuseIdentifier(identifier: "myCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 3 localization tables.
  struct string {
    /// This `R.string.errors` struct is generated, and contains static references to 23 localization keys.
    struct errors {
      /// Value: '%@' должно содержать %@ символов
      static let fieldIsNoEqual = Rswift.StringResource(key: "fieldIsNoEqual", tableName: "Errors ", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: '%@' может содержать только буквы, пробел, дефис
      static let forbiddenSymbolsForText = Rswift.StringResource(key: "forbiddenSymbolsForText", tableName: "Errors ", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: '%@' может содержать только латинские буквы, цифры, знак подчёркивания, точку и минус
      static let forbiddenSymbolsForEmailOrUsername = Rswift.StringResource(key: "forbiddenSymbolsForEmailOrUsername", tableName: "Errors ", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: '%@' может содержать только латинские буквы, цифры, знаки препинания
      static let forbiddenSymbolsForPassword = Rswift.StringResource(key: "forbiddenSymbolsForPassword", tableName: "Errors ", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: '%@' не может быть более %@ символов
      static let fieldIsTooLong = Rswift.StringResource(key: "fieldIsTooLong", tableName: "Errors ", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: '%@' не может быть менее %@ символов
      static let fieldIsTooShort = Rswift.StringResource(key: "fieldIsTooShort", tableName: "Errors ", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: '%@' не может быть пустым
      static let fieldIsEmpty = Rswift.StringResource(key: "fieldIsEmpty", tableName: "Errors ", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Дата еще не наступила
      static let dateStillToCome = Rswift.StringResource(key: "dateStillToCome", tableName: "Errors ", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Дата уже прошла
      static let dateAlreadyPast = Rswift.StringResource(key: "dateAlreadyPast", tableName: "Errors ", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Имя может содержать только латинские буквы и цифры
      static let userNameInvalidSymbol = Rswift.StringResource(key: "userNameInvalidSymbol", tableName: "Errors ", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Меньше необходимого временного интервала
      static let lessThanRequiredTimeInterval = Rswift.StringResource(key: "lessThanRequiredTimeInterval", tableName: "Errors ", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Название
      static let violationEntityName = Rswift.StringResource(key: "violationEntityName", tableName: "Errors ", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Не удалось найти идентификатор пользователя. Обновите профиль
      static let localUserIdIsNil = Rswift.StringResource(key: "localUserIdIsNil", tableName: "Errors ", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Не удалось получить ID пользователя
      static let remoteUserIdIsNil = Rswift.StringResource(key: "remoteUserIdIsNil", tableName: "Errors ", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Неверный Email
      static let invalidEmail = Rswift.StringResource(key: "invalidEmail", tableName: "Errors ", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Неверный формат
      static let incorrect = Rswift.StringResource(key: "incorrect", tableName: "Errors ", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Необходимо заполнить все обязательные поля
      static let emptyFields = Rswift.StringResource(key: "emptyFields", tableName: "Errors ", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Номер совпадает с текущим
      static let equalPhoneNumber = Rswift.StringResource(key: "equalPhoneNumber", tableName: "Errors ", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Номер телефона
      static let violationEntityPhoneNumber = Rswift.StringResource(key: "violationEntityPhoneNumber", tableName: "Errors ", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Пароли не совпадают
      static let passwordsAreDifferent = Rswift.StringResource(key: "passwordsAreDifferent", tableName: "Errors ", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Пароли не совпадают
      static let wrongPassword = Rswift.StringResource(key: "wrongPassword", tableName: "Errors ", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Пароль должен сожержать минимум 6 символов
      static let lengthPassword = Rswift.StringResource(key: "lengthPassword", tableName: "Errors ", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Почта
      static let violationEntityEmail = Rswift.StringResource(key: "violationEntityEmail", tableName: "Errors ", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: '%@' должно содержать %@ символов
      static func fieldIsNoEqual(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("fieldIsNoEqual", tableName: "Errors ", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Errors ", preferredLanguages: preferredLanguages) else {
          return "fieldIsNoEqual"
        }

        let format = NSLocalizedString("fieldIsNoEqual", tableName: "Errors ", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// Value: '%@' может содержать только буквы, пробел, дефис
      static func forbiddenSymbolsForText(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("forbiddenSymbolsForText", tableName: "Errors ", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Errors ", preferredLanguages: preferredLanguages) else {
          return "forbiddenSymbolsForText"
        }

        let format = NSLocalizedString("forbiddenSymbolsForText", tableName: "Errors ", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: '%@' может содержать только латинские буквы, цифры, знак подчёркивания, точку и минус
      static func forbiddenSymbolsForEmailOrUsername(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("forbiddenSymbolsForEmailOrUsername", tableName: "Errors ", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Errors ", preferredLanguages: preferredLanguages) else {
          return "forbiddenSymbolsForEmailOrUsername"
        }

        let format = NSLocalizedString("forbiddenSymbolsForEmailOrUsername", tableName: "Errors ", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: '%@' может содержать только латинские буквы, цифры, знаки препинания
      static func forbiddenSymbolsForPassword(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("forbiddenSymbolsForPassword", tableName: "Errors ", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Errors ", preferredLanguages: preferredLanguages) else {
          return "forbiddenSymbolsForPassword"
        }

        let format = NSLocalizedString("forbiddenSymbolsForPassword", tableName: "Errors ", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: '%@' не может быть более %@ символов
      static func fieldIsTooLong(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("fieldIsTooLong", tableName: "Errors ", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Errors ", preferredLanguages: preferredLanguages) else {
          return "fieldIsTooLong"
        }

        let format = NSLocalizedString("fieldIsTooLong", tableName: "Errors ", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// Value: '%@' не может быть менее %@ символов
      static func fieldIsTooShort(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("fieldIsTooShort", tableName: "Errors ", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Errors ", preferredLanguages: preferredLanguages) else {
          return "fieldIsTooShort"
        }

        let format = NSLocalizedString("fieldIsTooShort", tableName: "Errors ", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// Value: '%@' не может быть пустым
      static func fieldIsEmpty(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("fieldIsEmpty", tableName: "Errors ", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Errors ", preferredLanguages: preferredLanguages) else {
          return "fieldIsEmpty"
        }

        let format = NSLocalizedString("fieldIsEmpty", tableName: "Errors ", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Дата еще не наступила
      static func dateStillToCome(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dateStillToCome", tableName: "Errors ", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Errors ", preferredLanguages: preferredLanguages) else {
          return "dateStillToCome"
        }

        return NSLocalizedString("dateStillToCome", tableName: "Errors ", bundle: bundle, comment: "")
      }

      /// Value: Дата уже прошла
      static func dateAlreadyPast(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dateAlreadyPast", tableName: "Errors ", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Errors ", preferredLanguages: preferredLanguages) else {
          return "dateAlreadyPast"
        }

        return NSLocalizedString("dateAlreadyPast", tableName: "Errors ", bundle: bundle, comment: "")
      }

      /// Value: Имя может содержать только латинские буквы и цифры
      static func userNameInvalidSymbol(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("userNameInvalidSymbol", tableName: "Errors ", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Errors ", preferredLanguages: preferredLanguages) else {
          return "userNameInvalidSymbol"
        }

        return NSLocalizedString("userNameInvalidSymbol", tableName: "Errors ", bundle: bundle, comment: "")
      }

      /// Value: Меньше необходимого временного интервала
      static func lessThanRequiredTimeInterval(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lessThanRequiredTimeInterval", tableName: "Errors ", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Errors ", preferredLanguages: preferredLanguages) else {
          return "lessThanRequiredTimeInterval"
        }

        return NSLocalizedString("lessThanRequiredTimeInterval", tableName: "Errors ", bundle: bundle, comment: "")
      }

      /// Value: Название
      static func violationEntityName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("violationEntityName", tableName: "Errors ", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Errors ", preferredLanguages: preferredLanguages) else {
          return "violationEntityName"
        }

        return NSLocalizedString("violationEntityName", tableName: "Errors ", bundle: bundle, comment: "")
      }

      /// Value: Не удалось найти идентификатор пользователя. Обновите профиль
      static func localUserIdIsNil(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("localUserIdIsNil", tableName: "Errors ", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Errors ", preferredLanguages: preferredLanguages) else {
          return "localUserIdIsNil"
        }

        return NSLocalizedString("localUserIdIsNil", tableName: "Errors ", bundle: bundle, comment: "")
      }

      /// Value: Не удалось получить ID пользователя
      static func remoteUserIdIsNil(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("remoteUserIdIsNil", tableName: "Errors ", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Errors ", preferredLanguages: preferredLanguages) else {
          return "remoteUserIdIsNil"
        }

        return NSLocalizedString("remoteUserIdIsNil", tableName: "Errors ", bundle: bundle, comment: "")
      }

      /// Value: Неверный Email
      static func invalidEmail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("invalidEmail", tableName: "Errors ", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Errors ", preferredLanguages: preferredLanguages) else {
          return "invalidEmail"
        }

        return NSLocalizedString("invalidEmail", tableName: "Errors ", bundle: bundle, comment: "")
      }

      /// Value: Неверный формат
      static func incorrect(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("incorrect", tableName: "Errors ", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Errors ", preferredLanguages: preferredLanguages) else {
          return "incorrect"
        }

        return NSLocalizedString("incorrect", tableName: "Errors ", bundle: bundle, comment: "")
      }

      /// Value: Необходимо заполнить все обязательные поля
      static func emptyFields(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("emptyFields", tableName: "Errors ", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Errors ", preferredLanguages: preferredLanguages) else {
          return "emptyFields"
        }

        return NSLocalizedString("emptyFields", tableName: "Errors ", bundle: bundle, comment: "")
      }

      /// Value: Номер совпадает с текущим
      static func equalPhoneNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("equalPhoneNumber", tableName: "Errors ", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Errors ", preferredLanguages: preferredLanguages) else {
          return "equalPhoneNumber"
        }

        return NSLocalizedString("equalPhoneNumber", tableName: "Errors ", bundle: bundle, comment: "")
      }

      /// Value: Номер телефона
      static func violationEntityPhoneNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("violationEntityPhoneNumber", tableName: "Errors ", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Errors ", preferredLanguages: preferredLanguages) else {
          return "violationEntityPhoneNumber"
        }

        return NSLocalizedString("violationEntityPhoneNumber", tableName: "Errors ", bundle: bundle, comment: "")
      }

      /// Value: Пароли не совпадают
      static func passwordsAreDifferent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("passwordsAreDifferent", tableName: "Errors ", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Errors ", preferredLanguages: preferredLanguages) else {
          return "passwordsAreDifferent"
        }

        return NSLocalizedString("passwordsAreDifferent", tableName: "Errors ", bundle: bundle, comment: "")
      }

      /// Value: Пароли не совпадают
      static func wrongPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wrongPassword", tableName: "Errors ", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Errors ", preferredLanguages: preferredLanguages) else {
          return "wrongPassword"
        }

        return NSLocalizedString("wrongPassword", tableName: "Errors ", bundle: bundle, comment: "")
      }

      /// Value: Пароль должен сожержать минимум 6 символов
      static func lengthPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lengthPassword", tableName: "Errors ", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Errors ", preferredLanguages: preferredLanguages) else {
          return "lengthPassword"
        }

        return NSLocalizedString("lengthPassword", tableName: "Errors ", bundle: bundle, comment: "")
      }

      /// Value: Почта
      static func violationEntityEmail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("violationEntityEmail", tableName: "Errors ", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Errors ", preferredLanguages: preferredLanguages) else {
          return "violationEntityEmail"
        }

        return NSLocalizedString("violationEntityEmail", tableName: "Errors ", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.responseHandlers` struct is generated, and contains static references to 9 localization keys.
    struct responseHandlers {
      /// Value: *! You have not logged in for a long time, please log in again.
      static let youHaveNotLoggedInForAlongTimePleaseLogInAgain = Rswift.StringResource(key: "YouHaveNotLoggedInForAlongTimePleaseLogInAgain", tableName: "ResponseHandlers", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 404 не найдено  
      static let notFound = Rswift.StringResource(key: "NotFound", tableName: "ResponseHandlers", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Application Error.
      static let appError = Rswift.StringResource(key: "AppError", tableName: "ResponseHandlers", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Incorrect code, try again.
      static let incorrectCodeTryAgain = Rswift.StringResource(key: "IncorrectCodeTryAgain", tableName: "ResponseHandlers", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Incorrect username or password
      static let incorrectUsernameOrPassword = Rswift.StringResource(key: "IncorrectUsernameOrPassword", tableName: "ResponseHandlers", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: No username or password.
      static let noUsernameOrPassword = Rswift.StringResource(key: "NoUsernameOrPassword", tableName: "ResponseHandlers", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Requesting a code can only be done once every 2 minutes. Please try again later.
      static let requestingCodeCanOnlyBeDoneOnceEvery2MinutesPleaseTryAgainLater = Rswift.StringResource(key: "RequestingCodeCanOnlyBeDoneOnceEvery2MinutesPleaseTryAgainLater", tableName: "ResponseHandlers", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: The API client is not configured correctly, please contact customer support.
      static let apiClientIsNotConfiguredCorrectlyPleaseContactTechnicalSupport = Rswift.StringResource(key: "ApiClientIsNotConfiguredCorrectlyPleaseContactTechnicalSupport", tableName: "ResponseHandlers", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: The user has not been activated. Please contact support.
      static let userNotActivatedYouCanWithSupport = Rswift.StringResource(key: "UserNotActivatedYouCanWithSupport", tableName: "ResponseHandlers", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: *! You have not logged in for a long time, please log in again.
      static func youHaveNotLoggedInForAlongTimePleaseLogInAgain(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("YouHaveNotLoggedInForAlongTimePleaseLogInAgain", tableName: "ResponseHandlers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ResponseHandlers", preferredLanguages: preferredLanguages) else {
          return "YouHaveNotLoggedInForAlongTimePleaseLogInAgain"
        }

        return NSLocalizedString("YouHaveNotLoggedInForAlongTimePleaseLogInAgain", tableName: "ResponseHandlers", bundle: bundle, comment: "")
      }

      /// Value: 404 не найдено  
      static func notFound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NotFound", tableName: "ResponseHandlers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ResponseHandlers", preferredLanguages: preferredLanguages) else {
          return "NotFound"
        }

        return NSLocalizedString("NotFound", tableName: "ResponseHandlers", bundle: bundle, comment: "")
      }

      /// Value: Application Error.
      static func appError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AppError", tableName: "ResponseHandlers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ResponseHandlers", preferredLanguages: preferredLanguages) else {
          return "AppError"
        }

        return NSLocalizedString("AppError", tableName: "ResponseHandlers", bundle: bundle, comment: "")
      }

      /// Value: Incorrect code, try again.
      static func incorrectCodeTryAgain(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("IncorrectCodeTryAgain", tableName: "ResponseHandlers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ResponseHandlers", preferredLanguages: preferredLanguages) else {
          return "IncorrectCodeTryAgain"
        }

        return NSLocalizedString("IncorrectCodeTryAgain", tableName: "ResponseHandlers", bundle: bundle, comment: "")
      }

      /// Value: Incorrect username or password
      static func incorrectUsernameOrPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("IncorrectUsernameOrPassword", tableName: "ResponseHandlers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ResponseHandlers", preferredLanguages: preferredLanguages) else {
          return "IncorrectUsernameOrPassword"
        }

        return NSLocalizedString("IncorrectUsernameOrPassword", tableName: "ResponseHandlers", bundle: bundle, comment: "")
      }

      /// Value: No username or password.
      static func noUsernameOrPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NoUsernameOrPassword", tableName: "ResponseHandlers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ResponseHandlers", preferredLanguages: preferredLanguages) else {
          return "NoUsernameOrPassword"
        }

        return NSLocalizedString("NoUsernameOrPassword", tableName: "ResponseHandlers", bundle: bundle, comment: "")
      }

      /// Value: Requesting a code can only be done once every 2 minutes. Please try again later.
      static func requestingCodeCanOnlyBeDoneOnceEvery2MinutesPleaseTryAgainLater(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("RequestingCodeCanOnlyBeDoneOnceEvery2MinutesPleaseTryAgainLater", tableName: "ResponseHandlers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ResponseHandlers", preferredLanguages: preferredLanguages) else {
          return "RequestingCodeCanOnlyBeDoneOnceEvery2MinutesPleaseTryAgainLater"
        }

        return NSLocalizedString("RequestingCodeCanOnlyBeDoneOnceEvery2MinutesPleaseTryAgainLater", tableName: "ResponseHandlers", bundle: bundle, comment: "")
      }

      /// Value: The API client is not configured correctly, please contact customer support.
      static func apiClientIsNotConfiguredCorrectlyPleaseContactTechnicalSupport(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ApiClientIsNotConfiguredCorrectlyPleaseContactTechnicalSupport", tableName: "ResponseHandlers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ResponseHandlers", preferredLanguages: preferredLanguages) else {
          return "ApiClientIsNotConfiguredCorrectlyPleaseContactTechnicalSupport"
        }

        return NSLocalizedString("ApiClientIsNotConfiguredCorrectlyPleaseContactTechnicalSupport", tableName: "ResponseHandlers", bundle: bundle, comment: "")
      }

      /// Value: The user has not been activated. Please contact support.
      static func userNotActivatedYouCanWithSupport(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("UserNotActivatedYouCanWithSupport", tableName: "ResponseHandlers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ResponseHandlers", preferredLanguages: preferredLanguages) else {
          return "UserNotActivatedYouCanWithSupport"
        }

        return NSLocalizedString("UserNotActivatedYouCanWithSupport", tableName: "ResponseHandlers", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.scenes` struct is generated, and contains static references to 46 localization keys.
    struct scenes {
      /// Value: 
      static let emptyLine = Rswift.StringResource(key: "emptyLine", tableName: "Scenes", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value:  Birthday
      static let birthday = Rswift.StringResource(key: "birthday", tableName: "Scenes", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: *
      static let asterix = Rswift.StringResource(key: "asterix", tableName: "Scenes", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 1_3fxvjh2ky7s44cskwcgo0k8cwwogkocs8k4cwcwsg0skcsw4ok
      static let clientId = Rswift.StringResource(key: "clientId", tableName: "Scenes", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 4tf1qez2dc4ksg8w4og4co4w40s0gokwwkwkss8gc400owkokc
      static let secretId = Rswift.StringResource(key: "secretId", tableName: "Scenes", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Add
      static let add = Rswift.StringResource(key: "add", tableName: "Scenes", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Are you shure?
      static let areYouShure = Rswift.StringResource(key: "areYouShure", tableName: "Scenes", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Arial
      static let arial = Rswift.StringResource(key: "arial", tableName: "Scenes", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Cancel
      static let cancel = Rswift.StringResource(key: "cancel", tableName: "Scenes", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Confirm password
      static let confirmPassword = Rswift.StringResource(key: "confirmPassword", tableName: "Scenes", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Description
      static let placeholderForTextView = Rswift.StringResource(key: "placeholderForTextView", tableName: "Scenes", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Email
      static let email = Rswift.StringResource(key: "email", tableName: "Scenes", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Email adress
      static let emailAdress = Rswift.StringResource(key: "emailAdress", tableName: "Scenes", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Gill Sans
      static let gillSans = Rswift.StringResource(key: "gillSans", tableName: "Scenes", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Name
      static let placeholderForName = Rswift.StringResource(key: "placeholderForName", tableName: "Scenes", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: New
      static let new = Rswift.StringResource(key: "new", tableName: "Scenes", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: New password
      static let newPassword = Rswift.StringResource(key: "newPassword", tableName: "Scenes", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Next
      static let next = Rswift.StringResource(key: "next", tableName: "Scenes", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: OK
      static let ok = Rswift.StringResource(key: "ok", tableName: "Scenes", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Old password
      static let oldPassword = Rswift.StringResource(key: "oldPassword", tableName: "Scenes", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Open camera
      static let openCamera = Rswift.StringResource(key: "openCamera", tableName: "Scenes", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Password
      static let password = Rswift.StringResource(key: "password", tableName: "Scenes", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Personal data
      static let personalData = Rswift.StringResource(key: "personalData", tableName: "Scenes", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: PhotoCell
      static let idCellsPhoto = Rswift.StringResource(key: "idCellsPhoto", tableName: "Scenes", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Popular
      static let popular = Rswift.StringResource(key: "popular", tableName: "Scenes", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Save
      static let save = Rswift.StringResource(key: "save", tableName: "Scenes", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Search
      static let searchbarPlaceholder = Rswift.StringResource(key: "searchbarPlaceholder", tableName: "Scenes", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Select photo from gallery
      static let selectPhoto = Rswift.StringResource(key: "selectPhoto", tableName: "Scenes", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Sign Out
      static let signOut = Rswift.StringResource(key: "signOut", tableName: "Scenes", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: User Name
      static let userName = Rswift.StringResource(key: "userName", tableName: "Scenes", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: UserPhotoCell
      static let idcellsUserPhoto = Rswift.StringResource(key: "idcellsUserPhoto", tableName: "Scenes", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Warning
      static let warning = Rswift.StringResource(key: "warning", tableName: "Scenes", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You can 
      static let youCan = Rswift.StringResource(key: "youCan", tableName: "Scenes", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You don't have camera
      static let noneCamera = Rswift.StringResource(key: "noneCamera", tableName: "Scenes", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You don't have permission to access gallery.
      static let noneGallery = Rswift.StringResource(key: "noneGallery", tableName: "Scenes", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: accessToken
      static let token = Rswift.StringResource(key: "token", tableName: "Scenes", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: creationDate
      static let creationDate = Rswift.StringResource(key: "creationDate", tableName: "Scenes", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: delete your account
      static let deleteAcc = Rswift.StringResource(key: "deleteAcc", tableName: "Scenes", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: false
      static let `false` = Rswift.StringResource(key: "false", tableName: "Scenes", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: https://gallery.prod1.webant.ru
      static let apiEndpoint = Rswift.StringResource(key: "apiEndpoint", tableName: "Scenes", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: myCell
      static let myCell = Rswift.StringResource(key: "myCell", tableName: "Scenes", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: refreshToken
      static let refreshToken = Rswift.StringResource(key: "refreshToken", tableName: "Scenes", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: true
      static let `true` = Rswift.StringResource(key: "true", tableName: "Scenes", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Выберете изображение или заполните все поля.
      static let recomendation = Rswift.StringResource(key: "recomendation", tableName: "Scenes", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Попробуйте снова либо проверьте интернет соединение.
      static let recomendationInternet = Rswift.StringResource(key: "recomendationInternet", tableName: "Scenes", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Что-то не в порядке...
      static let someThingWrong = Rswift.StringResource(key: "someThingWrong", tableName: "Scenes", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: 
      static func emptyLine(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("emptyLine", tableName: "Scenes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Scenes", preferredLanguages: preferredLanguages) else {
          return "emptyLine"
        }

        return NSLocalizedString("emptyLine", tableName: "Scenes", bundle: bundle, comment: "")
      }

      /// Value:  Birthday
      static func birthday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("birthday", tableName: "Scenes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Scenes", preferredLanguages: preferredLanguages) else {
          return "birthday"
        }

        return NSLocalizedString("birthday", tableName: "Scenes", bundle: bundle, comment: "")
      }

      /// Value: *
      static func asterix(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("asterix", tableName: "Scenes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Scenes", preferredLanguages: preferredLanguages) else {
          return "asterix"
        }

        return NSLocalizedString("asterix", tableName: "Scenes", bundle: bundle, comment: "")
      }

      /// Value: 1_3fxvjh2ky7s44cskwcgo0k8cwwogkocs8k4cwcwsg0skcsw4ok
      static func clientId(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("clientId", tableName: "Scenes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Scenes", preferredLanguages: preferredLanguages) else {
          return "clientId"
        }

        return NSLocalizedString("clientId", tableName: "Scenes", bundle: bundle, comment: "")
      }

      /// Value: 4tf1qez2dc4ksg8w4og4co4w40s0gokwwkwkss8gc400owkokc
      static func secretId(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("secretId", tableName: "Scenes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Scenes", preferredLanguages: preferredLanguages) else {
          return "secretId"
        }

        return NSLocalizedString("secretId", tableName: "Scenes", bundle: bundle, comment: "")
      }

      /// Value: Add
      static func add(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("add", tableName: "Scenes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Scenes", preferredLanguages: preferredLanguages) else {
          return "add"
        }

        return NSLocalizedString("add", tableName: "Scenes", bundle: bundle, comment: "")
      }

      /// Value: Are you shure?
      static func areYouShure(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("areYouShure", tableName: "Scenes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Scenes", preferredLanguages: preferredLanguages) else {
          return "areYouShure"
        }

        return NSLocalizedString("areYouShure", tableName: "Scenes", bundle: bundle, comment: "")
      }

      /// Value: Arial
      static func arial(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("arial", tableName: "Scenes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Scenes", preferredLanguages: preferredLanguages) else {
          return "arial"
        }

        return NSLocalizedString("arial", tableName: "Scenes", bundle: bundle, comment: "")
      }

      /// Value: Cancel
      static func cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cancel", tableName: "Scenes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Scenes", preferredLanguages: preferredLanguages) else {
          return "cancel"
        }

        return NSLocalizedString("cancel", tableName: "Scenes", bundle: bundle, comment: "")
      }

      /// Value: Confirm password
      static func confirmPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("confirmPassword", tableName: "Scenes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Scenes", preferredLanguages: preferredLanguages) else {
          return "confirmPassword"
        }

        return NSLocalizedString("confirmPassword", tableName: "Scenes", bundle: bundle, comment: "")
      }

      /// Value: Description
      static func placeholderForTextView(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("placeholderForTextView", tableName: "Scenes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Scenes", preferredLanguages: preferredLanguages) else {
          return "placeholderForTextView"
        }

        return NSLocalizedString("placeholderForTextView", tableName: "Scenes", bundle: bundle, comment: "")
      }

      /// Value: Email
      static func email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("email", tableName: "Scenes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Scenes", preferredLanguages: preferredLanguages) else {
          return "email"
        }

        return NSLocalizedString("email", tableName: "Scenes", bundle: bundle, comment: "")
      }

      /// Value: Email adress
      static func emailAdress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("emailAdress", tableName: "Scenes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Scenes", preferredLanguages: preferredLanguages) else {
          return "emailAdress"
        }

        return NSLocalizedString("emailAdress", tableName: "Scenes", bundle: bundle, comment: "")
      }

      /// Value: Gill Sans
      static func gillSans(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gillSans", tableName: "Scenes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Scenes", preferredLanguages: preferredLanguages) else {
          return "gillSans"
        }

        return NSLocalizedString("gillSans", tableName: "Scenes", bundle: bundle, comment: "")
      }

      /// Value: Name
      static func placeholderForName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("placeholderForName", tableName: "Scenes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Scenes", preferredLanguages: preferredLanguages) else {
          return "placeholderForName"
        }

        return NSLocalizedString("placeholderForName", tableName: "Scenes", bundle: bundle, comment: "")
      }

      /// Value: New
      static func new(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new", tableName: "Scenes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Scenes", preferredLanguages: preferredLanguages) else {
          return "new"
        }

        return NSLocalizedString("new", tableName: "Scenes", bundle: bundle, comment: "")
      }

      /// Value: New password
      static func newPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("newPassword", tableName: "Scenes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Scenes", preferredLanguages: preferredLanguages) else {
          return "newPassword"
        }

        return NSLocalizedString("newPassword", tableName: "Scenes", bundle: bundle, comment: "")
      }

      /// Value: Next
      static func next(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("next", tableName: "Scenes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Scenes", preferredLanguages: preferredLanguages) else {
          return "next"
        }

        return NSLocalizedString("next", tableName: "Scenes", bundle: bundle, comment: "")
      }

      /// Value: OK
      static func ok(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ok", tableName: "Scenes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Scenes", preferredLanguages: preferredLanguages) else {
          return "ok"
        }

        return NSLocalizedString("ok", tableName: "Scenes", bundle: bundle, comment: "")
      }

      /// Value: Old password
      static func oldPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("oldPassword", tableName: "Scenes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Scenes", preferredLanguages: preferredLanguages) else {
          return "oldPassword"
        }

        return NSLocalizedString("oldPassword", tableName: "Scenes", bundle: bundle, comment: "")
      }

      /// Value: Open camera
      static func openCamera(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("openCamera", tableName: "Scenes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Scenes", preferredLanguages: preferredLanguages) else {
          return "openCamera"
        }

        return NSLocalizedString("openCamera", tableName: "Scenes", bundle: bundle, comment: "")
      }

      /// Value: Password
      static func password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("password", tableName: "Scenes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Scenes", preferredLanguages: preferredLanguages) else {
          return "password"
        }

        return NSLocalizedString("password", tableName: "Scenes", bundle: bundle, comment: "")
      }

      /// Value: Personal data
      static func personalData(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("personalData", tableName: "Scenes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Scenes", preferredLanguages: preferredLanguages) else {
          return "personalData"
        }

        return NSLocalizedString("personalData", tableName: "Scenes", bundle: bundle, comment: "")
      }

      /// Value: PhotoCell
      static func idCellsPhoto(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("idCellsPhoto", tableName: "Scenes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Scenes", preferredLanguages: preferredLanguages) else {
          return "idCellsPhoto"
        }

        return NSLocalizedString("idCellsPhoto", tableName: "Scenes", bundle: bundle, comment: "")
      }

      /// Value: Popular
      static func popular(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("popular", tableName: "Scenes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Scenes", preferredLanguages: preferredLanguages) else {
          return "popular"
        }

        return NSLocalizedString("popular", tableName: "Scenes", bundle: bundle, comment: "")
      }

      /// Value: Save
      static func save(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("save", tableName: "Scenes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Scenes", preferredLanguages: preferredLanguages) else {
          return "save"
        }

        return NSLocalizedString("save", tableName: "Scenes", bundle: bundle, comment: "")
      }

      /// Value: Search
      static func searchbarPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("searchbarPlaceholder", tableName: "Scenes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Scenes", preferredLanguages: preferredLanguages) else {
          return "searchbarPlaceholder"
        }

        return NSLocalizedString("searchbarPlaceholder", tableName: "Scenes", bundle: bundle, comment: "")
      }

      /// Value: Select photo from gallery
      static func selectPhoto(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("selectPhoto", tableName: "Scenes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Scenes", preferredLanguages: preferredLanguages) else {
          return "selectPhoto"
        }

        return NSLocalizedString("selectPhoto", tableName: "Scenes", bundle: bundle, comment: "")
      }

      /// Value: Sign Out
      static func signOut(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("signOut", tableName: "Scenes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Scenes", preferredLanguages: preferredLanguages) else {
          return "signOut"
        }

        return NSLocalizedString("signOut", tableName: "Scenes", bundle: bundle, comment: "")
      }

      /// Value: User Name
      static func userName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("userName", tableName: "Scenes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Scenes", preferredLanguages: preferredLanguages) else {
          return "userName"
        }

        return NSLocalizedString("userName", tableName: "Scenes", bundle: bundle, comment: "")
      }

      /// Value: UserPhotoCell
      static func idcellsUserPhoto(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("idcellsUserPhoto", tableName: "Scenes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Scenes", preferredLanguages: preferredLanguages) else {
          return "idcellsUserPhoto"
        }

        return NSLocalizedString("idcellsUserPhoto", tableName: "Scenes", bundle: bundle, comment: "")
      }

      /// Value: Warning
      static func warning(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("warning", tableName: "Scenes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Scenes", preferredLanguages: preferredLanguages) else {
          return "warning"
        }

        return NSLocalizedString("warning", tableName: "Scenes", bundle: bundle, comment: "")
      }

      /// Value: You can 
      static func youCan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("youCan", tableName: "Scenes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Scenes", preferredLanguages: preferredLanguages) else {
          return "youCan"
        }

        return NSLocalizedString("youCan", tableName: "Scenes", bundle: bundle, comment: "")
      }

      /// Value: You don't have camera
      static func noneCamera(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("noneCamera", tableName: "Scenes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Scenes", preferredLanguages: preferredLanguages) else {
          return "noneCamera"
        }

        return NSLocalizedString("noneCamera", tableName: "Scenes", bundle: bundle, comment: "")
      }

      /// Value: You don't have permission to access gallery.
      static func noneGallery(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("noneGallery", tableName: "Scenes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Scenes", preferredLanguages: preferredLanguages) else {
          return "noneGallery"
        }

        return NSLocalizedString("noneGallery", tableName: "Scenes", bundle: bundle, comment: "")
      }

      /// Value: accessToken
      static func token(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("token", tableName: "Scenes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Scenes", preferredLanguages: preferredLanguages) else {
          return "token"
        }

        return NSLocalizedString("token", tableName: "Scenes", bundle: bundle, comment: "")
      }

      /// Value: creationDate
      static func creationDate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("creationDate", tableName: "Scenes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Scenes", preferredLanguages: preferredLanguages) else {
          return "creationDate"
        }

        return NSLocalizedString("creationDate", tableName: "Scenes", bundle: bundle, comment: "")
      }

      /// Value: delete your account
      static func deleteAcc(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deleteAcc", tableName: "Scenes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Scenes", preferredLanguages: preferredLanguages) else {
          return "deleteAcc"
        }

        return NSLocalizedString("deleteAcc", tableName: "Scenes", bundle: bundle, comment: "")
      }

      /// Value: false
      static func `false`(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("false", tableName: "Scenes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Scenes", preferredLanguages: preferredLanguages) else {
          return "false"
        }

        return NSLocalizedString("false", tableName: "Scenes", bundle: bundle, comment: "")
      }

      /// Value: https://gallery.prod1.webant.ru
      static func apiEndpoint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("apiEndpoint", tableName: "Scenes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Scenes", preferredLanguages: preferredLanguages) else {
          return "apiEndpoint"
        }

        return NSLocalizedString("apiEndpoint", tableName: "Scenes", bundle: bundle, comment: "")
      }

      /// Value: myCell
      static func myCell(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("myCell", tableName: "Scenes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Scenes", preferredLanguages: preferredLanguages) else {
          return "myCell"
        }

        return NSLocalizedString("myCell", tableName: "Scenes", bundle: bundle, comment: "")
      }

      /// Value: refreshToken
      static func refreshToken(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("refreshToken", tableName: "Scenes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Scenes", preferredLanguages: preferredLanguages) else {
          return "refreshToken"
        }

        return NSLocalizedString("refreshToken", tableName: "Scenes", bundle: bundle, comment: "")
      }

      /// Value: true
      static func `true`(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("true", tableName: "Scenes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Scenes", preferredLanguages: preferredLanguages) else {
          return "true"
        }

        return NSLocalizedString("true", tableName: "Scenes", bundle: bundle, comment: "")
      }

      /// Value: Выберете изображение или заполните все поля.
      static func recomendation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recomendation", tableName: "Scenes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Scenes", preferredLanguages: preferredLanguages) else {
          return "recomendation"
        }

        return NSLocalizedString("recomendation", tableName: "Scenes", bundle: bundle, comment: "")
      }

      /// Value: Попробуйте снова либо проверьте интернет соединение.
      static func recomendationInternet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recomendationInternet", tableName: "Scenes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Scenes", preferredLanguages: preferredLanguages) else {
          return "recomendationInternet"
        }

        return NSLocalizedString("recomendationInternet", tableName: "Scenes", bundle: bundle, comment: "")
      }

      /// Value: Что-то не в порядке...
      static func someThingWrong(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("someThingWrong", tableName: "Scenes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Scenes", preferredLanguages: preferredLanguages) else {
          return "someThingWrong"
        }

        return NSLocalizedString("someThingWrong", tableName: "Scenes", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try authorizationSceneStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try detailStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try mainGalleryScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try mainStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try photoStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try profileStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try registerStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try welcomeStoryboard.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct authorizationSceneStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = AuthorizationSceneViewController

      let bundle = R.hostingBundle
      let name = "AuthorizationSceneStoryboard"

      static func validate() throws {
        if UIKit.UIImage(named: "Rectangle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Rectangle' is used in storyboard 'AuthorizationSceneStoryboard', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct detailStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = GalleryTest.DetailViewController

      let bundle = R.hostingBundle
      let name = "DetailStoryboard"

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "eye.fill") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'eye.fill' is used in storyboard 'DetailStoryboard', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "Intersect", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Intersect' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct mainGalleryScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UITabBarController

      let bundle = R.hostingBundle
      let mainGalleryScreen = StoryboardViewControllerResource<UIKit.UITabBarController>(identifier: "MainGalleryScreen")
      let name = "MainGalleryScreen"

      func mainGalleryScreen(_: Void = ()) -> UIKit.UITabBarController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainGalleryScreen)
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "camera.fill") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'camera.fill' is used in storyboard 'MainGalleryScreen', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "house.fill") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'house.fill' is used in storyboard 'MainGalleryScreen', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "person.fill") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'person.fill' is used in storyboard 'MainGalleryScreen', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.mainGalleryScreen().mainGalleryScreen() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainGalleryScreen' could not be loaded from storyboard 'MainGalleryScreen' as 'UIKit.UITabBarController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct mainStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MainViewController

      let bundle = R.hostingBundle
      let mainStoryboard = StoryboardViewControllerResource<MainViewController>(identifier: "MainStoryboard")
      let name = "MainStoryboard"

      func mainStoryboard(_: Void = ()) -> MainViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainStoryboard)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.mainStoryboard().mainStoryboard() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainStoryboard' could not be loaded from storyboard 'MainStoryboard' as 'MainViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct photoStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = PhotoViewController

      let bundle = R.hostingBundle
      let name = "PhotoStoryboard"
      let photoStoryboard = StoryboardViewControllerResource<PhotoViewController>(identifier: "PhotoStoryboard")

      func photoStoryboard(_: Void = ()) -> PhotoViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: photoStoryboard)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholder' is used in storyboard 'PhotoStoryboard', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.photoStoryboard().photoStoryboard() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'photoStoryboard' could not be loaded from storyboard 'PhotoStoryboard' as 'PhotoViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct profileStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ProfileViewController

      let bundle = R.hostingBundle
      let name = "ProfileStoryboard"

      static func validate() throws {
        if UIKit.UIImage(named: "photo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'photo' is used in storyboard 'ProfileStoryboard', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct registerStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = RegisterViewController

      let bundle = R.hostingBundle
      let name = "RegisterStoryboard"

      static func validate() throws {
        if UIKit.UIImage(named: "Rectangle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Rectangle' is used in storyboard 'RegisterStoryboard', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct welcomeStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let name = "WelcomeStoryboard"
      let welcomeStoryboard = StoryboardViewControllerResource<WelcomeViewController>(identifier: "WelcomeStoryboard")

      func welcomeStoryboard(_: Void = ()) -> WelcomeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: welcomeStoryboard)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Intersect", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Intersect' is used in storyboard 'WelcomeStoryboard', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.welcomeStoryboard().welcomeStoryboard() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'welcomeStoryboard' could not be loaded from storyboard 'WelcomeStoryboard' as 'WelcomeViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
